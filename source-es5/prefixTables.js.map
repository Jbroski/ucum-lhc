{"version":3,"sources":["../source/prefixTables.js"],"names":["PrefixTables","byCode_","byValue_","holdThis","prototype","Error","exports","self","getInstance","Object","keys","length","prefixBuff","pList","pLen","p","pfx","getPrefixByValue","code_","name_","value_","prefixList","sort","push","getPrefixByCode","prefixObj","getCode","getValue","code","undefined","value"],"mappings":";;;;;;;;;;AAAA;;;;AAIA;;;;;;IAMaA,Y,WAAAA,Y;;AAEX;;;;;;;;AAQA,0BAAa;AAAA;;AACX,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;;AAEA;;AAEA,QAAIC,WAAWH,aAAaI,SAA5B;AACAJ,mBAAe,wBAAU;AAAC,YAAM,IAAIK,KAAJ,CAAU,kCACV,yCADA,CAAN;AACkD,KAD5E;AAEA,QAAIC,OAAJ,EACEA,QAAQN,YAAR,GAAuBA,YAAvB;AACFA,iBAAaI,SAAb,GAAyBD,QAAzB;AACA,QAAII,OAAO,IAAX;AACAP,iBAAaQ,WAAb,GAA2B,YAAU;AAAC,aAAOD,IAAP;AAAY,KAAlD;AACD;;AAGD;;;;;;;;kCAIc;AACZ,aAAOE,OAAOC,IAAP,CAAY,KAAKT,OAAjB,EAA0BU,MAAjC;AACD;;AAGD;;;;;;;;yCAKqB;AACnB,UAAIC,aAAa,EAAjB;AACA,UAAIC,QAAQJ,OAAOC,IAAP,CAAY,KAAKR,QAAjB,CAAZ;AACA;AACA,UAAIY,OAAOD,MAAMF,MAAjB;AACA,WAAK,IAAII,IAAI,CAAb,EAAgBA,IAAID,IAApB,EAA0BC,GAA1B,EAA+B;AAC7B,YAAIC,MAAM,KAAKC,gBAAL,CAAsBJ,MAAME,CAAN,CAAtB,CAAV;AACAH,sBAAcI,IAAIE,KAAJ,GAAY,GAAZ,GAAkBF,IAAIG,KAAtB,GAA8B,IAA9B,GAAqCH,IAAII,MAAzC,GAAkD,MAAhE;AACD;AACD,aAAOR,UAAP;AACD;;AAED;;;;;;;;;;;wCAQoB;AAClB,UAAIS,aAAa,EAAjB;AACA,UAAIR,QAAQJ,OAAOC,IAAP,CAAY,KAAKT,OAAjB,CAAZ;AACAY,YAAMS,IAAN;AACA,UAAIR,OAAOD,MAAMF,MAAjB;AACA,WAAK,IAAII,IAAI,CAAb,EAAgBA,IAAID,IAApB,EAA0BC,GAA1B,EAA+B;AAC7BM,mBAAWE,IAAX,CAAgB,KAAKC,eAAL,CAAqBX,MAAME,CAAN,CAArB,CAAhB;AACD;AACD,aAAOM,UAAP;AACD;;AAED;;;;;;;;wBAKII,S,EAAU;AACZ,WAAKxB,OAAL,CAAawB,UAAUC,OAAV,EAAb,IAAoCD,SAApC;AACA,WAAKvB,QAAL,CAAcuB,UAAUE,QAAV,EAAd,IAAsCF,SAAtC;AACD;;AAGD;;;;;;;;;;;;8BASUG,I,EAAM;AACd,aAAO,KAAK3B,OAAL,CAAa2B,IAAb,MAAuB,IAAvB,IAA+B,KAAK3B,OAAL,CAAa2B,IAAb,MAAuBC,SAA7D;AACD;;AAGD;;;;;;;;;oCAMgBD,I,EAAM;AACpB,aAAO,KAAK3B,OAAL,CAAa2B,IAAb,CAAP;AACD;;AAGD;;;;;;;;;qCAMiBE,K,EAAO;AACtB,aAAO,KAAK5B,QAAL,CAAc4B,KAAd,CAAP;AACD;;;;KAED;;;AAGF;;;;;;;;;;;;;AAWA9B,aAAaQ,WAAb,GAA2B,YAAU;AACnC,SAAO,IAAIR,YAAJ,EAAP;AACD,CAFD;;AAIA;AACA;AACAA,aAAaQ,WAAb","file":"prefixTables.js","sourcesContent":["/**\n * The tables of defined prefixes is defined in this file.\n */\n\n/**\n * This class implements the table of multiplier prefixes.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\nexport class PrefixTables {\n\n  /**\n   * Constructor.  This creates the empty PrefixTable hashes once.\n   * There is one hash whose key is the prefix code and one whose\n   * key is the prefix value.\n   *\n   * Implementation of this as a singleton is based on the UnitTables\n   * implementation.  See that class for details.\n   */\n  constructor(){\n    this.byCode_ = {} ;\n    this.byValue_ = {};\n\n    // Make this a singleton.  See UnitTables constructor for details.\n\n    let holdThis = PrefixTables.prototype;\n    PrefixTables = function(){throw(new Error('PrefixTables is a Singleton. ' +\n                                    'Use PrefixTables.getInstance() instead.'))};\n    if (exports)\n      exports.PrefixTables = PrefixTables;\n    PrefixTables.prototype = holdThis;\n    let self = this ;\n    PrefixTables.getInstance = function(){return self} ;\n  }\n\n\n  /**\n   * Provides the number of prefix objects in each table\n   * @returns count of the number of prefix objects in each table\n   */\n  prefixCount() {\n    return Object.keys(this.byCode_).length ;\n  }\n\n\n  /**\n   * This is used to get all prefix objects by value.  Currently it is used\n   * to create a csv file with all prefixes and units.\n   * @returns csv string containing all prefix objects, ordered by value.\n   */\n  allPrefixesByValue() {\n    let prefixBuff = '';\n    let pList = Object.keys(this.byValue_);\n    //pList.sort() ;\n    let pLen = pList.length;\n    for (let p = 0; p < pLen; p++) {\n      let pfx = this.getPrefixByValue(pList[p]) ;\n      prefixBuff += pfx.code_ + ',' + pfx.name_ + ',,' + pfx.value_ + '\\r\\n';\n    }\n    return prefixBuff ;\n  }\n\n  /**\n   * This is used to get all prefix objects.  Currently it is used\n   * to get the objects to write to the json ucum definitions file\n   * that is used to provide prefix and unit definition objects for\n   * conversions and validations.\n   *\n   * @returns an array containing all prefix objects, ordered by code.\n   */\n  allPrefixesByCode() {\n    let prefixList = [];\n    let pList = Object.keys(this.byCode_);\n    pList.sort() ;\n    let pLen = pList.length;\n    for (let p = 0; p < pLen; p++) {\n      prefixList.push(this.getPrefixByCode(pList[p])) ;\n    }\n    return prefixList ;\n  }\n\n  /**\n   * Adds a prefix object to the tables\n   *\n   * @param prefixObj the object to be added to the tables\n   */\n  add(prefixObj){\n    this.byCode_[prefixObj.getCode()] = prefixObj;\n    this.byValue_[prefixObj.getValue()] = prefixObj;\n  }\n\n\n  /**\n   * Tests whether a prefix object is found for a specified code.  This\n   * is used to determine whether or not a prefix object has been created\n   * for the code.\n   *\n   * @param code the code to be used to find the prefix object\n   * @return boolean indicating whether or not a prefix object was found\n   *  for the specified code\n   */\n  isDefined(code) {\n    return this.byCode_[code] !== null && this.byCode_[code] !== undefined ;\n  }\n\n\n  /**\n   * Obtains a prefix object for a specified code.\n   *\n   * @param code the code to be used to find the prefix object\n   * @return the prefix object found, or null if nothing was found\n   */\n  getPrefixByCode(code) {\n    return this.byCode_[code];\n  }\n\n\n  /**\n   * Obtains a prefix object for a specified value.\n   *\n   * @param value the value to be used to find the prefix object\n   * @return the prefix object found, or null if nothing was found\n   */\n  getPrefixByValue(value) {\n    return this.byValue_[value];\n  }\n\n} // end PrefixTables class\n\n\n/**\n *  This function exists ONLY until the original PrefixTables constructor\n *  is called for the first time.  It's defined here in case getInstance\n *  is called before the constructor.   This calls the constructor.\n *\n *  The constructor redefines the getInstance function to return the\n *  singleton PrefixTable object.  This is based on the UnitTables singleton\n *  implementation; see more detail in the UnitTables constructor description.\n *\n *  @return the singleton PrefixTables object.\n */\nPrefixTables.getInstance = function(){\n  return new PrefixTables();\n}\n\n// Perform the first request for the tables object, to get the\n// getInstance method set.\nPrefixTables.getInstance();\n\n\n"]}