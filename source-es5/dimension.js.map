{"version":3,"sources":["../source/dimension.js"],"names":["UC","require","isInteger","Dimension","dimSetting","Ucum","dimLen_","Error","undefined","assignZero","Array","length","JSON","stringify","dimVec_","d","push","indexPos","Number","ret","propertyName","uProp","endsWith","join","dim2","i","s","isEqual","dimVec2","allZero","that","assignDim"],"mappings":"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","file":"dimension.js","sourcesContent":["/**\n * This class implements an object containing the vector of exponents for\n * a unit and its operations for addition, subtraction, and multiplication\n * with a scalar.\n *\n * This object should exist for each unit that can be expressed as a\n * vector of numbers.   This excludes arbitrary units, e.g., (10*23), and\n * units that are not numbers but are an expression based solely on numbers,\n * e.g., mol (mole) which is based on 10*23.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n */\nvar UC = require('./config.js');\nvar isInteger = require(\"is-integer\");\nexport class Dimension {\n\n  /**\n   * Constructor.\n   *\n   * @param dimSetting an optional parameter that may be:\n   *  null, which means that the dimVec_ attribute for this object will be null; or\n   *  an array, which must be the length defined by Ucum.dimLen_, and\n   *    whose contents will be copied to this new object's vector; or\n   *  an integer, which must be between 0 and 1 less than the vector length\n   *    defined by Ucum.dimLen_.  This new object's vector will be\n   *    initialized to zero for all elements except the one whose index\n   *    matches the number passed in.  That element will be set to one.\n\n   * @throws an error if the dimSetting parameter does not meet the types\n   *  listed above.\n   *  An error will also be thrown if Ucum.dimLen_ has not been set yet,\n   *  i.e., is still zero.   Currently that won't happen, because the\n   *  value is set in the config.js file.  But further down the road\n   *  the setting will come from a definitions input file, so we check\n   *  here anyway.\n   *\n   */\n  constructor(dimSetting) {\n\n    if (UC.Ucum.dimLen_ === 0) {\n      throw(new Error('Dimension.setDimensionLen must be called before ' +\n      'Dimension constructor'));\n    }\n    if (dimSetting === undefined || dimSetting === null) {\n      this.assignZero() ;\n    }\n    else if (dimSetting instanceof Array) {\n      if (dimSetting.length !== UC.Ucum.dimLen_) {\n        throw(new Error('Parameter error, incorrect length of vector passed to ' +\n            `Dimension constructor, vector = ${JSON.stringify(dimSetting)}`));\n      }\n      this.dimVec_ = [];\n      for (let d = 0; d < UC.Ucum.dimLen_; d++)\n        this.dimVec_.push(dimSetting[d]);\n    }\n\n    // In es6 this should be Number.isInteger(dimSetting).  But Babel\n    // doesn't transpile that correctly, so we need to use the isInteger\n    // module.  :0\n    else if (isInteger(dimSetting)) {\n      if (dimSetting < 0 || dimSetting >= UC.Ucum.dimLen_) {\n        throw(new Error('Parameter error, invalid element number specified for ' +\n        'Dimension constructor'));\n      }\n      this.assignZero() ;\n      this.dimVec_[dimSetting] = 1;\n    }\n  } // end constructor\n\n\n  /**\n   * Sets the element at the specified position to 1.  If the dimension vector\n   * is null when this is called a zero-filled vector is created and then the\n   * indicated position is set to 1.\n   *\n   * @param indexPos the index of the element to be set\n   * @throws an exception if the specified position is invalid, i.e., not a\n   *   number or is less than 0 or greater than Ucum.dimLen_\n   **/\n  setElementAt(indexPos) {\n\n    if (!Number.isInteger(indexPos) ||\n        indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {\n      throw(new Error(`Dimension.setElementAt called with an invalid index ` +\n      `position (${indexPos})`));\n    }\n\n    if (!this.dimVec_) {\n      this.assignZero();\n    }\n    this.dimVec_[indexPos] = 1;\n  }\n\n\n  /**\n   * Gets the value of the element at the specified position\n   *\n   * @param indexPos the index of the element whose value is to be returned\n   * @return the value of the element at indexPos, or null if the dimension\n   *  vector is null\n   * @throws an exception if the specified position is invalid, i.e., not a\n   *   number or is less than 0 or greater than Ucum.dimLen_\n   **/\n  getElementAt(indexPos) {\n    if (!Number.isInteger(indexPos) ||\n        indexPos < 0 || indexPos >= UC.Ucum.dimLen_) {\n      throw(new Error(`Dimension.getElementAt called with an invalid index ` +\n      `position (${indexPos})`));\n    }\n    let ret = null;\n    if (this.dimVec_)\n      ret = this.dimVec_[indexPos];\n    return ret;\n  }\n\n\n  /**\n   * This returns the value of the property named by the parameter\n   * passed in.  Although we currently only have one property, dimVec_,\n   * that this will get, it's possible that we'll have additional\n   * properties.   If we don't this could just be replaced by a\n   * getVector function.\n   *\n   * @param propertyName name of the property to be returned, with\n   *        or without the trailing underscore.\n   * @return the requested property, if found for this Dimension\n   * @throws an error if the property is not found for this Dimension\n   */\n  getProperty(propertyName) {\n    let uProp = (!(propertyName.endsWith('_'))) ? propertyName + '_' :\n        propertyName ;\n    return this[uProp] ;\n\n  } // end getProperty\n\n\n  /**\n   * Return a string that represents the dimension vector.  Returns null if\n   * the dimension vector is null.\n   *\n   * @return the string that represents the dimension vector.  The\n   *         values are enclosed in square brackets, each separated\n   *         by a comma and a space\n   **/\n  toString() {\n    let ret = null ;\n    if (this.dimVec_)\n      ret = '[' + this.dimVec_.join(', ') + ']';\n    return ret ;\n  }\n\n\n  /**\n   * Adds the vector of the dimension object passed in to this\n   * dimension object's vector.  This object's vector is changed.\n   * If either dimension vector is null, no changes are made to this object.\n   *\n   *\n   * @param dim2 the dimension whose vector is to be added to this one\n   * @return this object\n   * @throws an exception if dim2 is not a Dimension object\n   **/\n  add(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.add called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (this.dimVec_ && dim2.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] += dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Subtracts the vector of the dimension object passed in from this\n   * dimension object's vector.  This object's vector is changed.\n   * If either dimension vector is null, no changes are made to this object.\n   *\n   * @param dim2 the dimension whose vector is to be subtracted from this one\n   * @return this object\n   * @throws an exception if dim2 is not a Dimension object\n   **/\n  sub(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.sub called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (this.dimVec_ && dim2.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] -= dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Inverts this dimension object's vector (by multiplying each element\n   * by negative 1).  This object's vector is changed - unless it is null,\n   * in which case it stays that way.\n   *\n   * @return this object\n   **/\n  minus() {\n    if (this.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] = -this.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Multiplies this dimension object's vector with a scalar.  This is used\n   * when a unit is raised to a power.  This object's vector is changed unless\n   * the vector is null, in which case it stays that way.\n   *\n   * @param s the scalar to use\n   * @return this object\n   * @throws an exception if s is not a number\n   */\n  mul(s) {\n    if (!isInteger(s)) {\n      throw(new Error(`Dimension.sub called with an invalid parameter - ` +\n      `${typeof dim2} instead of a number`));\n    }\n    if (this.dimVec_) {\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] *= s;\n    }\n    return this;\n  }\n\n\n  /**\n   * Tests for equality of this dimension object's vector and that of\n   * the dimension object passed in.  If the dimension vector for one of\n   * the objects is null, the dimension vector for the other object must\n   * also be null for the two to be equal.  (I know - duh.  still)\n   *\n   * @param dim2 the dimension object whose vector is to be compared to this one\n   * @return true if the two vectors are equal; false otherwise.\n   * @throws an exception if dim2 is not a Dimension object\n   */\n  equals(dim2) {\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.equals called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    let isEqual = true ;\n    let dimVec2 = dim2.dimVec_;\n    if (this.dimVec_ && dimVec2) {\n      for (let i = 0; isEqual && i < UC.Ucum.dimLen_; i++)\n        isEqual = (this.dimVec_[i] === dimVec2[i]);\n    }\n    else {\n      isEqual = (this.dimVec_ === null && dimVec2 === null);\n    }\n    return isEqual;\n  }\n\n\n  /**\n   * Assigns the contents of the vector belonging to the dimension object\n   * passed in to this dimension's vector.  If this dimension vector is null\n   * and the other is not, this one will get the contents of the other.  If\n   * this dimension vector is not null but the one passed in is null, this\n   * one will be set to null.\n   *\n   * @param dim2 the dimension object with the vector whose contents are\n   *  to be assigned to this dimension's vector\n   * @return this object (not sure why)\n   * @throws an exception if dim2 is not a Dimension object\n   */\n  assignDim(dim2) {\n\n    if (!dim2 instanceof Dimension) {\n      throw(new Error(`Dimension.assignDim called with an invalid parameter - ` +\n      `${typeof dim2} instead of a Dimension object`));\n    }\n    if (dim2.dimVec_ === null)\n      this.dimVec_ = null;\n    else {\n      if (this.dimVec_ === null) {\n        this.dimVec_ = [] ;\n      }\n      for (let i = 0; i < UC.Ucum.dimLen_; i++)\n        this.dimVec_[i] = dim2.dimVec_[i];\n    }\n    return this;\n  }\n\n\n  /**\n   * Sets all elements of this dimension object's vector to zero.\n   * If this object's vector is null, it is created as a zero-filled vector.\n   *\n   * @return this object (not sure why)\n   */\n  assignZero() {\n    if (this.dimVec_ === null || this.dimVec_ === undefined)\n      this.dimVec_ = [];\n\n    for (let i = 0; i < UC.Ucum.dimLen_; i++) {\n      this.dimVec_.push(0);\n    }\n    return this;\n  }\n\n\n  /**\n   * Tests for a dimension vector set to all zeroes.\n   *\n   * @return true if exponents (elements) of this dimension's vector are all\n   * zero; false otherwise (including if the current vector is null).\n   *\n   */\n  isZero() {\n    let allZero = this.dimVec_ !== null ;\n    if (this.dimVec_) {\n      for (let i = 0; allZero && i < UC.Ucum.dimLen_; i++)\n        allZero = this.dimVec_[i] === 0;\n    }\n    return allZero;\n  }\n\n\n  /**\n   * Tests for a Dimension object with no dimension vector (dimVec_ is null).\n   *\n   * @return true the dimension vector is null; false if it is not\n   *\n   */\n  isNull() {\n    return (this.dimVec_ === null);\n  }\n\n\n  /**\n   * Creates and returns a clone of this Dimension object\n   *\n   * @return the clone\n   */\n  clone() {\n    let that = new Dimension();\n    that.assignDim(this);\n    return that;\n  }\n\n} // end Dimension class\n"]}