{"version":3,"sources":["../source/unitTables.js"],"names":["Ucum","require","UcumJsonDefs","fs","UnitTables","unitNames_","unitCodes_","codeOrder_","unitStrings_","unitDimensions_","unitSynonyms_","holdThis","prototype","Error","exports","self","getInstance","Object","keys","length","theUnit","uName","addUnitName","addUnitCode","addUnitString","getProperty","addUnitDimension","err","push","uCode","uString","caseSensitive_","uEntry","mag","unit","uDim","code","uSyns","synonyms_","synsAry","split","aLen","a","theSyn","trim","addSynonymCodes","name_","theCode","theSynonyms","words","wLen","w","word","synCodes","indexOf","retUnit","undefined","sepPos","codeSep_","substr","retUnits","uLen","i","csCode_","retAry","unitsArray","console","log","uSyn","retObj","buildUnitSynonyms","foundCodes","fLen","f","message","nameList","codes","sort","compareCodes","b","replace","toLowerCase","unitsList","u","getUnitByCode","cols","sep","unitBuff","getAllUnitNames","cLen","nameRecs","getUnitByName","rec","c","dim_","dimVec_","Array","join","cbuf","doLong","codeList","unitString","curUnit","curDim","csUnitString_","baseFactor_","cnv_","defError_","sList","sKeys","sLen","s","sKey","kLen","JSON","stringify","substring","writeFileSync","encoding","mode","flag"],"mappings":"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","file":"unitTables.js","sourcesContent":["/**\n * This class manages Hashtables that provide references to\n * defined units.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\n\nvar Ucum = require('./config.js').Ucum;\nvar UcumJsonDefs = require('./ucumJsonDefs.js').UcumJsonDefs;\nvar fs = require('fs');\n\nexport class UnitTables {\n\n\n  /**\n   * Constructor.  This creates the empty unit tables (hashes) once. After the\n   * tables are created, it redefines this constructor to throw an error\n   * stating that the constructor is no longer available and that the\n   * getInstance function must be used.   Here's a description of the first\n   * and then all subsequent calls to this constructor.\n   *\n   * First call to constructor:\n   * 1. creates  OBJECT1\n   * 2. initializes attributes of OBJECT1\n   * 3. stores reference to OBJECT1.prototype in holdthis local variable\n   * 4. redefines OBJECT1 as a function that throws an error\n   * 5. defines the getInstance function (which is also defined outside of\n   *    the class definition - see below).\n   *\n   * All subsequent calls to constructor:\n   * 1. throw error message referring to getInstance\n   * 2. call getInstance, returns this - which is OBJECT1.\n   */\n  constructor() {\n\n    /**\n     * Tracks units by name\n     * @type hash - key is the name;\n     *              value is an array of references to the Unit objects\n     *              with the name.  More than one unit may have the same\n     *              name, e.g., \"second\", which is shared by the base unit\n     *              with the code = \"s\" and the unit with code = \"'\".\n     */\n    this.unitNames_ = {};\n\n    /**\n     * Tracks units by code using case-sensitive version.\n     *\n     * @type hash - key is the code;\n     *              value is the reference to the Unit object.  Codes must\n     *              be unique.\n     */\n    this.unitCodes_ = {};\n\n    /**\n     * Keeps track of the order in which units are defined.  The order is\n     * important because unit definitions build on previous definitions.\n     *\n     * @type {Array}\n     */\n    this.codeOrder_ = [] ;\n\n    /**\n     * Tracks units by unit strings, e.g., cm-1\n     *\n     * @type hash - key is the unit string\n     *              value is an array of unit objects with that ciUnitString.\n     */\n    this.unitStrings_ = {};\n\n    /**\n     * Tracks units by Dimension vector\n     *\n     * @type hash - key is the dimension vector (not the object, just the\n     *              vector);\n     *              value is an array of references to the Unit objects\n     *              with that vector.  More than one unit may have the same\n     *              unit vector, and this can be used to provide a list\n     *              of commensurable units.\n     */\n    this.unitDimensions_ = {};\n\n    /**\n     * Maps synonyms to units.   Not built until first requested.\n     *\n     * @type hash - key is the synonym\n     *              value is an array of references to Unit objects that\n     *              include that synonym.\n     */\n     this.unitSynonyms_ = {};\n\n    // Make this a singleton - from mrme44 May 18 comment on\n    // on GitHub Gist page of SanderLi/Singleton.js.  Modified\n    // for this class.\n\n    let holdThis = UnitTables.prototype;\n    UnitTables = function(){throw (new Error(\"UnitTables is a Singleton.  \" +\n                                  'Use UnitTables.getInstance() instead.'))};\n    if (exports)\n      exports.UnitTables = UnitTables ;\n    UnitTables.prototype = holdThis;\n    let self = this;\n    UnitTables.getInstance = function(){return self};\n  }\n\n\n  /**\n   * Provides the number of unit objects written to the tables, using the\n   * codes table since codes must be unique.\n   *\n   * @returns count of the number of unit objects in the unitCodes_ table.\n   */\n  unitsCount() {\n    return Object.keys(this.unitCodes_).length ;\n  }\n\n\n  /**\n   * Adds a Unit object to the tables.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   * @throws passes on an error if one is thrown by the called functions for\n   *  a problem with the unit code or unit name\n   */\n  addUnit(theUnit) {\n\n    let uName = theUnit['name_'] ;\n    if (uName) {\n      this.addUnitName(theUnit);\n    }\n\n    this.addUnitCode(theUnit);\n    this.addUnitString(theUnit);\n\n    try {\n      if (theUnit['dim_'].getProperty('dimVec_'))\n        this.addUnitDimension(theUnit);\n    }\n    catch(err){\n      // do nothing - throws error if the property is null\n      // and that's OK here.\n    }\n\n  } // end addUnit\n\n\n  /**\n   * Adds a Unit object to the unitNames_ table.  More than one unit\n   * can have the same name, e.g., the two units with the name \"second\",\n   * where the code for one of them is 's' and the code for the other is\n   * \"'\".  Because of this, an array of unit objects is stored for the\n   * name.  In most cases it will be an array of one object, but this\n   * clarifies that there may be more than one.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   * @throws an error if the unit has no name\n   */\n  addUnitName(theUnit) {\n\n    let uName = theUnit['name_'];\n\n    if (uName) {\n      if (this.unitNames_[uName])\n        this.unitNames_[uName].push(theUnit);\n      else\n        this.unitNames_[uName] = [theUnit];\n    }\n    else\n      throw(new Error('UnitTables.addUnitName called for a unit with no name.  ' +\n            `Unit code = ${theUnit['csCode_']}.`));\n\n  } // end addUnitName\n\n\n  /**\n   * Adds a Unit object to the unitCodes_, unitUcCodes_, unitLcCodes_ and\n   * codeOrder_ tables.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   * @throws an error if theunitCodes_ table already contains a unit with the code\n   */\n  addUnitCode(theUnit) {\n\n    let uCode = theUnit['csCode_'];\n    if (uCode) {\n\n      if (this.unitCodes_[uCode])\n        throw(new Error(`UnitTables.addUnitCode called, already contains entry for ` +\n              `unit with code = ${uCode}`));\n      else {\n        this.unitCodes_[uCode] = theUnit;\n        this.codeOrder_.push(uCode);\n      }\n    }\n    else\n      throw(new Error('UnitTables.addUnitCode called for unit that has ' +\n                      'no code.')) ;\n\n  } // end addUnitCode\n\n\n  /**\n   * Adds a unit object to the unitStrings_ table.  More than one unit\n   * can have the same string, so an array of unit objects is stored\n   * for the string.  The unit string is the string that creates a non-base\n   * unit, e.g., a Newton has a unit code of N, a name of Newton, and a\n   * unitString of kg.m/s2.\n   *\n   * If the unit has no string, nothing is stored and no error is reported.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   */\n  addUnitString(theUnit) {\n\n    let uString = null;\n    if (Ucum.caseSensitive_ == true)\n      uString = theUnit['csUnitString_'];\n    else\n      uString = theUnit['ciUnitString_'];\n\n    if (uString) {\n      let uEntry = {mag: theUnit['baseFactorStr_'], unit: theUnit};\n      if (this.unitStrings_[uString])\n        this.unitStrings_[uString].push(uEntry);\n      else\n        this.unitStrings_[uString] = [uEntry];\n    }\n  } // end addUnitString\n\n\n  /**\n   * Adds a Unit object to the unitDimensions_ table.  More than one unit\n   * can have the same dimension (commensurable units have the same dimension).\n   * Because of this, an array of unit objects is stored for the\n   * dimension.\n   *\n   * @param theUnit the unit to be added\n   * @returns nothing\n   * @throws an error if the unit has no dimension\n   */\n  addUnitDimension(theUnit) {\n\n    let uDim = theUnit['dim_'].getProperty('dimVec_');\n\n    if (uDim) {\n      if (this.unitDimensions_[uDim])\n        this.unitDimensions_[uDim].push(theUnit);\n      else\n        this.unitDimensions_[uDim] = [theUnit];\n    }\n    else\n      throw(new Error('UnitTables.addUnitDimension called for a unit with no dimension.  ' +\n          `Unit code = ${theUnit['csCode_']}.`));\n\n  } // end addUnitDimension\n\n\n  /**\n   * Builds the unitSynonyms_ table. This is called the first time the\n   * getUnitsBySynonym method is called.  The table/hash contains each word\n   * (once) from each synonym as well as each word from each unit name.\n   *\n   * Hash keys are the words.  Hash values are an array of unit codes for\n   * each unit that has that word in its synonyms or name.\n   *\n   * @returns nothing\n   */\n  buildUnitSynonyms() {\n\n    for (let code in this.unitCodes_) {\n      let theUnit = this.unitCodes_[code];\n      let uSyns = theUnit.synonyms_ ;\n\n      // If the current unit has synonyms, process each synonym (often multiples)\n      if (uSyns) {\n        let synsAry = uSyns.split(';');\n        if (synsAry[0] !== '') {\n          let aLen = synsAry.length;\n          for (let a = 0; a < aLen; a++) {\n            let theSyn = synsAry[a].trim();\n\n            // call addSynonymCodes to process each word in the\n            // synonym, e.g., \"British fluid ounces\"\n            this.addSynonymCodes(code, theSyn) ;\n          } // end do for each synonym\n        } // end if the current unit has a non-null synonym attribute\n      } // end if the unit has any synonyms\n\n      // Now call addSynonymCodes to process each word in the unit's name\n      this.addSynonymCodes(code, theUnit.name_) ;\n    } // end do for each unit\n   } // end buildUnitSynonyms\n\n\n  /**\n   * Adds unit code entries to the synonyms table for a string containing\n   * one or more words to be considered as synonyms.\n   *\n   * @param theCode the unit code to be connected to the synonyms\n   * @param theSynonyms a string containing one or more words to be\n   *  considered synonyms (and thus to be added to the unitSynonyms hash).\n   */\n  addSynonymCodes(theCode, theSynonyms) {\n\n    let words = theSynonyms.split(' ');\n    let wLen = words.length;\n\n    for (let w = 0; w < wLen; w++) {\n      let word = words[w];\n\n      // if there is already a synonyms entry for the word,\n      // get the array of unit codes currently assigned to\n      // the word and add the code for the current word to\n      // the synonyms array if it's not already there.\n      if (this.unitSynonyms_[word]) {\n        let synCodes = this.unitSynonyms_[word];\n        if (synCodes.indexOf(theCode) === -1) {\n          this.unitSynonyms_[word].push(theCode);\n        }\n      }\n      // else there are no synonyms entry for the word.  Create a\n      // synonyms array for the word, setting it to contain the unit code.\n      else {\n        this.unitSynonyms_[word] = [theCode];\n      }\n    } // end do for each word in the synonyms being processed\n\n  } // end addSynonymCodes\n\n\n  /**\n   *  Returns a unit object with a case-sensitive code matching the\n   *  uCode parameter, or null if no unit is found with that code.\n   *\n   *  @param uCode the code of the unit to be returned\n   *  @returns the unit object or null if it is not found\n   */\n  getUnitByCode(uCode) {\n    let retUnit = null ;\n    if (uCode) {\n      retUnit = this.unitCodes_[uCode];\n    }\n    return retUnit ;\n  }\n\n\n  /**\n   *  Returns a array of unit objects based on the unit's name.  Usually this\n   *  will be an array of one, but there may be more, since unit names are\n   *  not necessarily unique.\n   *\n   *  @param uName the name of the unit to be returned.  If more than one\n   *  unit has the same name and you only want one specific unit, append the\n   *  csCode of the unit you want to the end of the name, separated by the\n   *  Ucum.codeSep_ value, e.g., inch - [in_i] vs. inch - [in_us].\n   *  @returns null if no unit was found for the specified name OR an array of\n   *  unit objects with the specified name.  Normally this will be an array\n   *  of one object.\n   *  @throws an error if no name is provided to search on\n   */\n  getUnitByName(uName) {\n\n    if (uName === null || uName === undefined) {\n      throw (new Error('Unable to find unit by name because no name was provided.'));\n    }\n    let sepPos = uName.indexOf(Ucum.codeSep_);\n    let uCode = null;\n    if (sepPos >= 1) {\n      uCode = uName.substr(sepPos + Ucum.codeSep_.length);\n      uName = uName.substr(0, sepPos);\n    }\n    let retUnits = this.unitNames_[uName] ;\n    if (retUnits) {\n      let uLen = retUnits.length ;\n\n      if (uCode && uLen > 1) {\n        let i = 0;\n        for (; retUnits[i].csCode_ !== uCode && i < uLen; i++);\n        if (i < uLen)\n          retUnits = [retUnits[i]];\n        else {\n          retUnits = null;\n        }\n      } // end if we need to find both a name and a code\n    } // end if we got an array of units\n    return retUnits ;\n\n  } // end getUnitByName\n\n\n  /**\n   *  Returns an array of unit objects with the specified unit string.\n   *  The array may contain one or more unit reference objects.\n   *  Or none, if no units have a matching unit string (which is not\n   *  considered an error)\n   *\n   *  @param name the name of the unit to be returned\n   *  @returns the array of unit references or null if none were found\n   */\n  getUnitByString(uString) {\n    let retAry = null ;\n    if (uString) {\n      retAry = this.unitStrings_[uString] ;\n      if (retAry === undefined)\n        retAry = null;\n    }\n    return retAry ;\n  }\n\n\n  /**\n   *  Returns a array of unit objects based on the unit's dimension vector.\n   *\n   *  @param uName the dimension vector of the units to be returned.\n   *\n   *  @returns null if no unit was found for the specified vector OR an array of\n   *  one or more unit objects with the specified vector.\n   *  @throws an error if no vector is provided to search on\n   *  logs an error to the console if no unit is found\n   */\n  getUnitsByDimension(uDim) {\n\n    let unitsArray = null ;\n    if (uDim === null || uDim === undefined) {\n      throw (new Error('Unable to find unit by because no dimension ' +\n                       'vector was provided.'));\n    }\n\n    unitsArray = this.unitDimensions_[uDim] ;\n    if (unitsArray === undefined || unitsArray === null) {\n      console.log(`Unable to find unit with dimension = ${uDim}`);\n    }\n\n    return unitsArray ;\n\n  } // end getUnitsByDimension\n\n\n  /**\n   *  Returns a array of unit objects that include the specified synonym.\n   *\n   *  @param uSyn the synonym of the units to be returned.\n   *\n   *  @returns an object with two of the following three elements:\n   *   'status' will be error, failed or succeeded\n   *   'msg' will be included for returns with status = error or failed and\n   *     will explain why the request did not return any units\n   *   'units' any array of unit objects with the specified synonym will be\n   *     returned for requests with status = succeeded\n   */\n  getUnitBySynonym(uSyn) {\n\n    let retObj = {} ;\n    let unitsArray = [];\n\n    try {\n      if (uSyn === null || uSyn === undefined) {\n        retObj['status'] = 'error' ;\n        throw (new Error('Unable to find unit by synonym because no synonym ' +\n            'was provided.'));\n      }\n      // If this is the first request for a unit by synonym, build the hash map\n      if (Object.keys(this.unitSynonyms_).length === 0) {\n        this.buildUnitSynonyms();\n      }\n      let foundCodes = [];\n      foundCodes = this.unitSynonyms_[uSyn];\n      if (foundCodes) {\n        retObj['status'] = 'succeeded';\n        let fLen = foundCodes.length;\n        for (let f = 0; f < fLen; f++) {\n          unitsArray.push(this.unitCodes_[foundCodes[f]]);\n        }\n        retObj['units'] = unitsArray ;\n      }\n      if (unitsArray.length === 0) {\n        retObj['status'] = 'failed' ;\n        retObj['msg'] = `Unable to find any units with synonym = ${uSyn}`;\n      }\n    }\n    catch(err) {\n      retObj['msg'] = err.message ;\n    }\n    return retObj ;\n  } // end getUnitBySynonym\n\n\n  /**\n   * Gets a list of all unit names in the Unit tables\n   *\n   * @returns an array of the unit names\n   */\n  getAllUnitNames() {\n    return Object.keys(this.unitNames_);\n  } // end getAllUnitNames\n\n\n  /**\n   * Gets a list of all unit names in the tables.  Where more than one\n   * unit has the same name, the unit code, in parentheses, is appended\n   * to the end of the name.\n   *\n   * @returns {Array}\n   */\n  getUnitNamesList() {\n    let nameList = [];\n    let codes = Object.keys(this.unitCodes_);\n    codes.sort(this.compareCodes) ;\n    let uLen = codes.length;\n    for (let i = 0; i < uLen; i++) {\n      nameList[i] = codes[i] + Ucum.codeSep_ + this.unitCodes_[codes[i]].name_\n    } // end do for each code\n    return nameList ;\n  }\n\n\n  /**\n   * This provides a sort function for unit codes so that sorting ignores\n   * square brackets and case.\n   *\n   * @param a first value\n   * @param b second value\n   * @returns -1 if a is should fall before b; otherwise 1.\n   */\n  compareCodes(a, b) {\n    a = a.replace(/[\\[\\]]/g, '');\n    a = a.toLowerCase();\n    b = b.replace(/[\\[\\]]/g, '');\n    b = b.toLowerCase();\n    return (a < b) ? -1 : 1 ;\n  }\n\n\n  /**\n   * Gets a list of all unit codes in the Unit tables\n   *\n   * @returns an array of the unit names\n   */\n  getAllUnitCodes() {\n    return Object.keys(this.unitCodes_);\n  } // end getAllUnitNames\n\n\n  /**\n   * This is used to get all unit objects.  Currently it is used\n   * to get the objects to write to the json ucum definitions file\n   * that is used to provide prefix and unit definition objects for\n   * conversions and validations.\n   *\n   * @returns an array containing all unit objects, ordered by definition\n   * order\n   */\n  allUnitsByDef() {\n\n    let unitsList = [];\n    let uLen = this.codeOrder_.length ;\n    for (let u = 0; u < uLen; u++) {\n      unitsList.push(this.getUnitByCode(this.codeOrder_[u]));\n    }\n    return unitsList ;\n  } // end allUnitsByDef\n\n\n  /**\n   * This is used to get all unit objects, ordered by unit name.  Currently it\n   * is used to create a csv list of all units.\n   * @param sep separator character (or string) to be used to separate each\n   *  column in the output.  Optional, defaults to '|' if not specified.\n   *  (Used to use ; but the synonyms use that extensively).  Don't use a\n   *  comma or any other punctuation found in the output data.\n   * @returns a buffer containing all unit objects, ordered by name\n   * order\n   */\n  allUnitsByName(cols, sep) {\n    if (sep === undefined || sep === null)\n      sep = '|';\n    let unitBuff = '';\n    let unitsList = this.getAllUnitNames();\n    let uLen = unitsList.length;\n    let cLen = cols.length;\n    for (let i = 0; i < uLen; i++) {\n      let nameRecs = this.getUnitByName(unitsList[i]);\n      for (let u = 0; u < nameRecs.length; u++) {\n        let rec = nameRecs[u];\n        for (let c = 0; c < cLen; c++) {\n          if (c > 0)\n            unitBuff += sep;\n          if (cols[c] === 'dim_') {\n            if (rec.dim_ !== null && rec.dim_ !== undefined &&\n                rec.dim_.dimVec_ instanceof Array)\n              unitBuff += '[' + rec.dim_.dimVec_.join(',') + ']';\n            else\n              unitBuff += '';\n          }\n          else {\n            let cbuf = rec[cols[c]];\n            if (typeof cbuf === 'string')\n              unitBuff += cbuf.replace(/[\\n\\r]/g, ' ');\n            else\n              unitBuff += cbuf ;\n          }\n        } // end do for each column requested\n        unitBuff += '\\r\\n';\n      } // end do for each unit in the unit names array\n    }\n    return unitBuff ;\n  } // end allUnitsByName\n\n\n  /**\n   * This creates a list of all units in the tables.  It uses the byCode\n   * table, and uses the codeOrder_ array to determine the order in which\n   * the units are listed.\n   *\n   * @param doLong boolean indicating how much to output.  If true, all data\n   *  from the unit objects is included.   If false, only a few major values\n   *  are included.\n   * @param sep separator character (or string) to be used to separate each\n   *  column in the output.  Optional, defaults to '|' if not specified.\n   *  (Used to use ; but the synonyms use that extensively).\n   * @returns {string} buffer containing all the listings\n   */\n  printUnits(doLong, sep) {\n    if (doLong === undefined)\n      doLong = false ;\n    if (sep === undefined)\n      sep = '|';\n    let codeList = '';\n    let uLen = this.codeOrder_.length ;\n    let unitString = 'csCode' + sep  ;\n    if (doLong) {\n      unitString += 'ciCode' + sep ;\n    }\n    unitString += 'name' + sep ;\n    if (doLong)\n      unitString += 'isBase' + sep ;\n    unitString += 'magnitude' + sep + 'dimension' + sep + 'from unit(s)' + sep +\n                  'value' + sep + 'function' + sep ;\n    if (doLong)\n      unitString += 'property' + sep + 'printSymbol' + sep + 'synonyms' + sep +\n                    'source' + sep + 'class' + sep + 'isMetric' + sep +\n                    'variable' + sep + 'isSpecial' + sep + 'isAbitrary' + sep ;\n    unitString += 'comment';\n    codeList = unitString + '\\n' ;\n\n    for (let u = 0; u < uLen; u++) {\n      let curUnit = this.getUnitByCode(this.codeOrder_[u]);\n      unitString = this.codeOrder_[u] + sep ;\n      if (doLong) {\n        unitString += curUnit.getProperty('ciCode_') + sep ;\n      }\n      unitString += curUnit.getProperty('name_') + sep ;\n      if (doLong) {\n        if (curUnit.getProperty('isBase_'))\n          unitString += 'true' + sep ;\n        else\n          unitString += 'false' + sep ;\n      }\n      unitString += curUnit.getProperty('magnitude_')  + sep;\n      let curDim = curUnit.getProperty('dim_');\n      if (curDim) {\n        unitString += curDim.dimVec_ + sep ;\n      }\n      else {\n        unitString += 'null' + sep;\n      }\n      if (curUnit.csUnitString_)\n        unitString += curUnit.csUnitString_ + sep + curUnit.baseFactor_ + sep ;\n      else\n        unitString += 'null' + sep + 'null' + sep;\n\n      if (curUnit.cnv_)\n        unitString += curUnit.cnv_ + sep ;\n      else\n        unitString += 'null' + sep ;\n\n      if (doLong) {\n        unitString += curUnit.getProperty('property_') + sep +\n                      curUnit.getProperty('printSymbol_') + sep +\n                      curUnit.getProperty('synonyms_') + sep +\n                      curUnit.getProperty('source_') + sep +\n                      curUnit.getProperty('class_') + sep +\n                      curUnit.getProperty('isMetric_') + sep +\n                      curUnit.getProperty('variable_') + sep +\n                      curUnit.getProperty('isSpecial_') + sep +\n                      curUnit.getProperty('isArbitrary_') + sep ;\n      }\n      if (curUnit.defError_)\n        unitString += 'problem parsing this one, deferred to later.' ;\n      codeList += unitString + '\\n' ;\n    }\n    return codeList ;\n  }\n\n\n  /**\n   * This creates a list of the synonyms in the unitSynonyms hash.  It writes\n   * it in synonym order and in csv format, and includes the synonym, the number\n   * of units for the synonym, and the list of unit codes for the synonym.\n   * It uses | as a separator rather than a comma, to keep from interfering\n   * with the JSON output for the unit code arrays kept for each synonym.\n   *\n   * @returns outputs to a file named \"SynonymsList.txt'\n   */\n  printSynonyms() {\n    let sList = 'synonym|unit count|unit codes\\n';\n    let sKeys = Object.keys(this.unitSynonyms_).sort();\n    let sLen = sKeys.length ;\n    for (let s = 0; s < sLen; s++) {\n      let sKey = sKeys[s];\n      let kLen = this.unitSynonyms_[sKey].length;\n      let codes = JSON.stringify(this.unitSynonyms_[sKey]);\n      codes = codes.substring(1, codes.length - 2);\n      sList += sKey + '|' + kLen + '|' + codes + '\\n';\n    }\n    fs.writeFileSync('SynonymsList.txt', sList,\n        {encoding: 'utf8', mode: 0o666, flag: 'w'} );\n  } // printSynonyms\n\n} // end UnitTables\n\n\n/**\n *  This function exists ONLY until the original UnitTables constructor\n *  is called for the first time.  It's defined here in case getInstance\n *  is called before the constructor.   This calls the constructor.\n *\n *  The constructor redefines the getInstance function to return the\n *  singleton UnitTables object.  See more detail in the constructor\n *  description.\n *\n *  @returns the singleton UnitTables object.\n */\nUnitTables.getInstance = function(){\n  return new UnitTables();\n} ;\n\n// Perform the first request for the tables object, to get the\n// getInstance method set.\nUnitTables.getInstance();"]}